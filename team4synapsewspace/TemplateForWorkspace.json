{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "team4synapsewspace"
		},
		"AzureSynapse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapse'"
		},
		"LSCloudSales_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LSCloudSales'"
		},
		"LSCloudStreaming_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LSCloudStreaming'"
		},
		"LSFourthCoffeenew_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LSFourthCoffeenew'"
		},
		"LSFourthcoffeefile_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LSFourthcoffeefile'"
		},
		"LSVanArsedelsql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LSVanArsedelsql'"
		},
		"LSmovies_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LSmovies'"
		},
		"team4synapsewspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'team4synapsewspace-WorkspaceDefaultSqlServer'"
		},
		"LSFourthCoffeenew_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\FourthCoffee\\CDrive"
		},
		"LSFourthCoffeenew_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "southridge"
		},
		"LSFourthcoffeefile_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\FourthCoffee\\C"
		},
		"LSFourthcoffeefile_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "southridge"
		},
		"team4synapsewspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adls2team4.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_streaming')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_nzu",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_nzu",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawteam4/southridge/streaming/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_nzu",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Southridgestreaming",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.txt"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.txt"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.txt"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-16T18:18:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_nzu')]",
				"[concat(variables('workspaceId'), '/datasets/Southridgestreaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_DvdSalesTransformation')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SalesOrder",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrderDetails": {
										"cw_fileName": "dboOrderDetails.txt"
									},
									"Orders": {
										"cw_fileName": "dboOrders.txt"
									},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "NewAzureIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-16T21:12:30Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_SalesOrder')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/NewAzureIR')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_ReadJsonMovies')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "$['availabilityDate']"
										},
										"sink": {
											"name": "availabilityDate"
										}
									},
									{
										"source": {
											"path": "$['genre']"
										},
										"sink": {
											"name": "genre"
										}
									},
									{
										"source": {
											"path": "$['rating']"
										},
										"sink": {
											"name": "rating"
										}
									},
									{
										"source": {
											"path": "$['releaseYear']"
										},
										"sink": {
											"name": "releaseYear"
										}
									},
									{
										"source": {
											"path": "$['runtime']"
										},
										"sink": {
											"name": "runtime"
										}
									},
									{
										"source": {
											"path": "$['streamingAvailabilityDate']"
										},
										"sink": {
											"name": "streamingAvailabilityDate"
										}
									},
									{
										"source": {
											"path": "$['tier']"
										},
										"sink": {
											"name": "tier"
										}
									},
									{
										"source": {
											"path": "$['title']"
										},
										"sink": {
											"name": "title"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id"
										}
									}
								],
								"collectionReference": "$['actors']"
							}
						},
						"inputs": [
							{
								"referenceName": "SouthridgeMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoveiFlatten",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-16T21:19:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SouthridgeMovies')]",
				"[concat(variables('workspaceId'), '/datasets/MoveiFlatten')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_copyactorstosynapse')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_j6r",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "rawteam4/fourthcoffee/Actors.csv"
							},
							{
								"name": "Destination",
								"value": "dbo.Actors"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"path": "rawteam4/fourthcoffee"
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_j6r",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_j6r",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-17T16:16:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_j6r')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_j6r')]",
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_cpfourthcoffee')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_xu9",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "Rentals/"
							},
							{
								"name": "Destination",
								"value": "rawteam4/fourthcoffee/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_xu9",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Fourthcoffee",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-16T18:18:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_xu9')]",
				"[concat(variables('workspaceId'), '/datasets/Fourthcoffee')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_cpmoviestoadls')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_x1y",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies"
							},
							{
								"name": "Destination",
								"value": "rawteam4/movies/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_x1y",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SouthridgeMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-16T18:18:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_x1y')]",
				"[concat(variables('workspaceId'), '/datasets/SouthridgeMovies')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_cpstreamingtoadls')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_s2g11",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_s2g",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawteam4/CloudSales/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_s2g",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SouthridgeCloudSales",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.txt"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.txt"
								}
							},
							{
								"source": {
									"table": "OrderDetails"
								},
								"destination": {
									"fileName": "dboOrderDetails.txt"
								}
							},
							{
								"source": {
									"table": "Orders"
								},
								"destination": {
									"fileName": "dboOrders.txt"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-16T18:18:30Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_s2g')]",
				"[concat(variables('workspaceId'), '/datasets/SouthridgeCloudSales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_cpvanarsedeltoadls')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_4pp",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_4pp",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawteam4/vanarsdel/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_4pp",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "vanarsdel",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Actors"
								},
								"destination": {
									"fileName": "dboActors.txt"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.txt"
								}
							},
							{
								"source": {
									"table": "MovieActors"
								},
								"destination": {
									"fileName": "dboMovieActors.txt"
								}
							},
							{
								"source": {
									"table": "Movies"
								},
								"destination": {
									"fileName": "dboMovies.txt"
								}
							},
							{
								"source": {
									"table": "OnlineMovieMappings"
								},
								"destination": {
									"fileName": "dboOnlineMovieMappings.txt"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.txt"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-16T18:18:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_4pp')]",
				"[concat(variables('workspaceId'), '/datasets/vanarsdel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_j6r')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Actors"
				},
				"sqlPool": {
					"referenceName": "team4",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/team4')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_k8l')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "southridge/CloudStreaming",
						"fileSystem": "rawteam4"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DvdSales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "DVDSales",
						"fileSystem": "processed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Fourthcoffee')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fourthcoffee",
						"fileSystem": "rawteam4"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveiFlatten')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "southridge/movies",
						"fileSystem": "rawteam4"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_4pp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LSVanArsedelsql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LSVanArsedelsql')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_j6r')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Actors.csv",
						"folderPath": "fourthcoffee",
						"fileSystem": "rawteam4"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_k8l')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LSCloudStreaming",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LSCloudStreaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_nzu')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LSCloudStreaming",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LSCloudStreaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_s2g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LSCloudSales",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LSCloudSales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_x1y')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LSmovies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"actors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									}
								}
							}
						},
						"availabilityDate": {
							"type": "string"
						},
						"genre": {
							"type": "string"
						},
						"rating": {
							"type": "string"
						},
						"releaseYear": {
							"type": "integer"
						},
						"runtime": {
							"type": "integer"
						},
						"streamingAvailabilityDate": {
							"type": "string"
						},
						"tier": {
							"type": "integer"
						},
						"title": {
							"type": "string"
						}
					}
				},
				"typeProperties": {
					"collectionName": "movies"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LSmovies')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_xu9')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LSFourthCoffeenew",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "Rentals"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LSFourthCoffeenew')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SouthridgeCloudSales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "southridge/CloudSales",
						"fileSystem": "rawteam4"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SouthridgeMovies')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "southridge/movies",
						"fileSystem": "rawteam4"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"quoteChar": "\"",
					"firstRowAsHeader": true
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Southridgestreaming')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "southridge/streaming",
						"fileSystem": "rawteam4"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/vanarsdel')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "team4synapsewspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "vanarsdel",
						"fileSystem": "rawteam4"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/team4synapsewspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapse')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapse_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LSCloudSales')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LSCloudSales_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LSCloudStreaming')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LSCloudStreaming_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LSFourthCoffeenew')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LSFourthCoffeenew_properties_typeProperties_host')]",
					"userId": "[parameters('LSFourthCoffeenew_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LSFourthCoffeenew_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IR-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IR-SHIR')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LSFourthcoffeefile')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LSFourthcoffeefile_properties_typeProperties_host')]",
					"userId": "[parameters('LSFourthcoffeefile_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LSFourthcoffeefile_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IR-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IR-SHIR')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LSVanArsedelsql')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LSVanArsedelsql_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-SHIR2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IR-SHIR2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LSmovies')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('LSmovies_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/team4synapsewspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('team4synapsewspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/team4synapsewspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('team4synapsewspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IR-SHIR')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IR-SHIR2')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NewAzureIR')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 16,
							"timeToLive": 15,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_SalesOrder')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SouthridgeCloudSales",
								"type": "DatasetReference"
							},
							"name": "OrderDetails"
						},
						{
							"dataset": {
								"referenceName": "SouthridgeCloudSales",
								"type": "DatasetReference"
							},
							"name": "Orders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DvdSales",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join1"
						},
						{
							"name": "Transformation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderDetailID as string,",
						"          OrderID as string,",
						"          MovieID as string,",
						"          Quantity as short,",
						"          UnitCost as double,",
						"          LineNumber as short,",
						"          CreatedDate as string,",
						"          UpdatedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrderDetails",
						"source(output(",
						"          OrderID as string,",
						"          CustomerID as string,",
						"          OrderDate as string,",
						"          ShipDate as string,",
						"          TotalCost as double,",
						"          CreatedDate as string,",
						"          UpdatedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Orders",
						"Orders select(mapColumn(",
						"          OrderID,",
						"          CustomerID,",
						"          OrderDate,",
						"          ShipDate,",
						"          TotalCost,",
						"          CreatedDate,",
						"          UpdatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"OrderDetails select(mapColumn(",
						"          OrderDetailID,",
						"          OrderID,",
						"          MovieID,",
						"          Quantity,",
						"          UnitCost,",
						"          LineNumber,",
						"          CreatedDate,",
						"          UpdatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Orders, OrderDetails join(Orders@OrderID == OrderDetails@OrderID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(SourceID = \"1\",",
						"          UniqueOrderID = concat(\"1\",OrderDetailID),",
						"          UniqueMovieID = concat(\"1\", MovieID),",
						"          UniqueCustomerID = concat(\"1\",CustomerID),",
						"          TotalCost = toFloat(TotalCost),",
						"          UnitCost = toFloat(UnitCost),",
						"          OrderDate = toTimestamp(OrderDate,'yyyy-MM-dd HH:mm:ss'),",
						"          ShipDate = toTimestamp(ShipDate,'yyyy-MM-dd HH:mm:ss'),",
						"          Quantity = toInteger(Quantity),",
						"          LineNumber = toInteger(LineNumber)) ~> Transformation",
						"Transformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DvdSales.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SouthridgeCloudSales')]",
				"[concat(variables('workspaceId'), '/datasets/DvdSales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://adls2team4.dfs.core.windows.net/rawteam4/conformed/Categories/part-00000-0beef26c-2a7b-4f90-ac84-bfb72871ac59-c000.csv',\n        FORMAT = 'CSV',\n        firstrow = 2,\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ApachePool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "6e405ac6-c437-4c18-b44c-4f0f46bf774e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b9a8b22f-7693-4f61-b656-8b2dcc6b6074/resourceGroups/MDWOHRG/providers/Microsoft.Synapse/workspaces/team4synapsewspace/bigDataPools/ApachePool1",
						"name": "ApachePool1",
						"type": "Spark",
						"endpoint": "https://team4synapsewspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApachePool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/fourthcoffee/Actors.csv', format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							", header=True\r\n",
							")\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df1 = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/fourthcoffee/Movies.csv', format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							", header=True\r\n",
							")\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df2 = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/fourthcoffee/MovieActors.csv', format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							", header=True\r\n",
							")\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df.createOrReplaceTempView('Actors')\r\n",
							"df1.createOrReplaceTempView('Movies')\r\n",
							"df2.createOrReplaceTempView('MovieActors')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"dfresult = spark.sql(\"Select distinct 3 as SourceID, A.ActorID,ActorName,Rating, cast(SUBSTR(ReleaseDate,7,4) as integer) ReleaseYear,ReleaseDate ,MovieTitle,M.MovieID From Movies M JOIN MovieActors AM ON M.MovieID = AM.MovieID JOIN Actors A ON A.ActorID = AM.ActorID\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"dfresult.describe"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"# Write all data back tot he serve layer in Parquet format\r\n",
							"dfresult.write.format(\"parquet\").mode(\"overwrite\").save('abfss://rawteam4@adls2team4.dfs.core.windows.net/fourthcoffee/combined')"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/fourthcoffee/combined/part-00000-305d5840-bb92-4b91-b3b7-8e294be64308-c000.snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df1 = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/southridge/movies/data_3f52b042-9b0f-4ac6-80fb-33bee16fe616_250100c9-965a-4ac2-8941-d45f5b33073f.txt', format='text')\r\n",
							"display(df1.limit(10))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql \r\n",
							"select 'all' as filename, count(*) as rows \r\n",
							"from fdic_ris.cdi\r\n",
							"union all\r\n",
							"select filename, count(*) as rows\r\n",
							"from fdic_ris.cdi\r\n",
							"group by filename"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dimMovies')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ApachePool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "af02c0a1-5f89-43b5-acd8-441f3eaccccd"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b9a8b22f-7693-4f61-b656-8b2dcc6b6074/resourceGroups/MDWOHRG/providers/Microsoft.Synapse/workspaces/team4synapsewspace/bigDataPools/ApachePool1",
						"name": "ApachePool1",
						"type": "Spark",
						"endpoint": "https://team4synapsewspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApachePool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"# Read in movies csv from fourth coffee\r\n",
							"data_path = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/fourthcoffee/Movies.csv', format='csv', header=True)\r\n",
							"\r\n",
							"fourth_coffee_df = data_path.toPandas()\r\n",
							"fourth_coffee_df['DataSource'] = 'Fourth Coffee'\r\n",
							"fourth_coffee_df.head()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Read in movies csv from van arsdel\r\n",
							"data_path = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/vanarsdel/dboMovies.txt', format='text', header=True)\r\n",
							"\r\n",
							"van_arsdel_df = data_path.toPandas()\r\n",
							"van_arsdel_df['DataSource'] = 'Van Arsdel'\r\n",
							"van_arsdel_df.head()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read in movies csv from van arsdel\r\n",
							"data_path = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/vanarsdel/dboActors.txt', format='text', header=True)\r\n",
							"\r\n",
							"van_arsdel_df = data_path.toPandas()\r\n",
							"van_arsdel_df['DataSource'] = 'Van Arsdel1'\r\n",
							"van_arsdel_df.head()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Read in movies csv from van arsdel\r\n",
							"data_path = spark.read.load('abfss://rawteam4@adls2team4.dfs.core.windows.net/southridge/movies/data_3f52b042-9b0f-4ac6-80fb-33bee16fe616_250100c9-965a-4ac2-8941-d45f5b33073f.json', format='json')\r\n",
							"\r\n",
							"cosmos_df = data_path.toPandas()\r\n",
							"cosmos_df['DataSource'] = 'Southridge'\r\n",
							"cosmos_df.head()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df1 = fourth_coffee_df.append(van_arsdel_df, sort=False)\r\n",
							"movies_df = movies_df1.append(cosmos_df, sort=False)\r\n",
							"movies_df['Category'] = movies_df['Category'].fillna(movies_df['genre'])\r\n",
							"movies_df['Rating'] = movies_df['Rating'].fillna(movies_df['rating'])\r\n",
							"movies_df['RunTimeMin'] = movies_df['RunTimeMin'].fillna(movies_df['runtime'])\r\n",
							"movies_df['MovieTitle'] = movies_df['MovieTitle'].fillna(movies_df['title'])\r\n",
							"movies_df['MovieID'] = movies_df['MovieID'].fillna(movies_df['id'])\r\n",
							"movies_df['Rating'] = movies_df['Rating'].replace('PG=13','PG-13')\r\n",
							"movies_df.head()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create Categories Dimension Table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"categories_df_dedupe = movies_df[['Category']].drop_duplicates()\r\n",
							"len(categories_df_dedupe)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"categories_df_dedupe = categories_df_dedupe.reset_index(drop=True).reset_index()\r\n",
							"categories_df_dedupe.head(10)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"categories_sparkdf = spark.createDataFrame(categories_df_dedupe)\r\n",
							"categories_sparkdf = categories_sparkdf.coalesce(1)\r\n",
							"categories_sparkdf.write.option(\"header\",\"true\").mode(\"OVERWRITE\").csv('abfss://rawteam4@adls2team4.dfs.core.windows.net/conformed/Categories')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create Ratings Dimension Table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ratings_df_dedupe = movies_df[['Rating']].drop_duplicates()\r\n",
							"len(ratings_df_dedupe)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ratings_df_dedupe = ratings_df_dedupe.reset_index(drop=True).reset_index()\r\n",
							"ratings_df_dedupe.head()"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ratings_sparkdf = spark.createDataFrame(ratings_df_dedupe)\r\n",
							"ratings_sparkdf = ratings_sparkdf.coalesce(1)\r\n",
							"ratings_sparkdf.write.option(\"header\",\"true\").mode(\"OVERWRITE\").csv('abfss://rawteam4@adls2team4.dfs.core.windows.net/conformed/Ratings')"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create Movies Dimension Table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print (len(fourth_coffee_df))\r\n",
							"print (len(van_arsdel_df))\r\n",
							"print (len(cosmos_df))\r\n",
							"print (len(movies_df))"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df_dedupe = movies_df[['MovieID','MovieTitle','Category','Rating','RunTimeMin']].drop_duplicates()\r\n",
							"print(len(movies_df_dedupe))"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df_dedupe.isnull().sum()"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df_dedupe.head()"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df_dedupe = movies_df_dedupe.reset_index()"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df_dedupe.head()"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df_dedupe_sk = pd.merge(movies_df_dedupe, categories_df_dedupe, on='Category', how='left')\r\n",
							"movies_df_dedupe_sk = movies_df_dedupe_sk.drop('Category', axis=1)\r\n",
							"movies_df_dedupe_sk = movies_df_dedupe_sk.rename(columns={'index_y':'MovieCategorySK'})\r\n",
							"movies_df_dedupe_sk.head()"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df_dedupe_sk = pd.merge(movies_df_dedupe_sk, ratings_df_dedupe, on='Rating', how='left')\r\n",
							"movies_df_dedupe_sk = movies_df_dedupe_sk.drop('Rating', axis=1)\r\n",
							"movies_df_dedupe_sk = movies_df_dedupe_sk.rename(columns={'index':'MovieRatingSK'})\r\n",
							"movies_df_dedupe_sk = movies_df_dedupe_sk.rename(columns={'index_x':'MovieSK'})\r\n",
							"movies_df_dedupe_sk.head()"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_df_dedupe_sk['MovieSK'] = movies_df_dedupe_sk['MovieSK'].astype(int)\r\n",
							"movies_df_dedupe_sk['MovieID'] = movies_df_dedupe_sk['MovieID'].astype(str)\r\n",
							"movies_df_dedupe_sk['MovieTitle'] = movies_df_dedupe_sk['MovieTitle'].astype(str)\r\n",
							"movies_df_dedupe_sk['MovieCategorySK'] = movies_df_dedupe_sk['MovieCategorySK'].astype(int)\r\n",
							"movies_df_dedupe_sk['MovieRatingSK'] = movies_df_dedupe_sk['MovieRatingSK'].astype(int)\r\n",
							"movies_df_dedupe_sk['RunTimeMin'] = movies_df_dedupe_sk['RunTimeMin'].astype(float)"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_sparkdf = spark.createDataFrame(movies_df_dedupe_sk) "
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_sparkdf = movies_sparkdf.coalesce(1)"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"movies_sparkdf.write.option(\"header\",\"true\").mode(\"OVERWRITE\").csv('abfss://rawteam4@adls2team4.dfs.core.windows.net/conformed/Movies')"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ApachePool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 120
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/team4')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		}
	]
}